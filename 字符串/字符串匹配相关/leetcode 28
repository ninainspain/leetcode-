class Solution:
    def strStr(self, haystack: str, needle: str) -> int:
        # Edge cases: 
        # if needle is empty return 0
        if not needle:
            return 0
        
        # if haystack is empty or needle's length is greater than haystack's length return -1
        if not haystack or len(needle) > len(haystack):
            return -1
        
        return self.kmp_search(haystack, needle)
        
    def build_next(self, patt: str) -> list:
        next = [0]
        prefix_len = 0
        i = 1
        while i < len(patt):
            if patt[prefix_len] == patt[i]:
                prefix_len += 1
                next.append(prefix_len)
                i += 1
            else:
                if prefix_len != 0:
                    prefix_len = next[prefix_len-1]
                else:
                    next.append(0)
                    i += 1
        return next
        
    def kmp_search(self, string: str, patt: str) -> int:
        next = self.build_next(patt)
        i = 0
        j = 0
        while i < len(string):
            if string[i] == patt[j]:
                i += 1
                j += 1
            elif j > 0:
                j = next[j-1]
            else:
                i += 1
            
            if j == len(patt):
                return i - j
        return -1  # no match found

